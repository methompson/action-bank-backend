/**
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/
module.exports = {
  root: true,
  "env": {
    "node": true
  },
  extends: [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  ignorePatterns: [
    '.eslintrc.js',
  ],
  plugins: [
    '@typescript-eslint',
  ],
  parserOptions: {
    project: "tsconfig.json",
    sourceType: "module",
  },
  parser: "@typescript-eslint/parser",
  rules: {
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "eqeqeq": [
      "error",
      "smart"
    ],
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    // "@typescript-eslint/adjacent-overload-signatures": "error",
    // "@typescript-eslint/array-type": [
    //   "error",
    //   {
    //     "default": "array"
    //   }
    // ],
    // "@typescript-eslint/ban-ts-comment": "error",
    // "@typescript-eslint/ban-types": [
    //   "error",
    //   {
    //     "types": {
    //       "Object": {
    //         "message": "Avoid using the `Object` type. Did you mean `object`?"
    //       },
    //       "Function": {
    //         "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`."
    //       },
    //       "Boolean": {
    //         "message": "Avoid using the `Boolean` type. Did you mean `boolean`?"
    //       },
    //       "Number": {
    //         "message": "Avoid using the `Number` type. Did you mean `number`?"
    //       },
    //       "String": {
    //         "message": "Avoid using the `String` type. Did you mean `string`?"
    //       },
    //       "Symbol": {
    //         "message": "Avoid using the `Symbol` type. Did you mean `symbol`?"
    //       }
    //     }
    //   }
    // ],
    // "@typescript-eslint/consistent-type-assertions": "error",
    // "@typescript-eslint/dot-notation": "error",
    // "@typescript-eslint/explicit-module-boundary-types": "off",
    // "@typescript-eslint/indent": [
    //   "error",
    //   2,
    //   {
    //     "FunctionDeclaration": {
    //       "parameters": "first"
    //     },
    //     "FunctionExpression": {
    //       "parameters": "first"
    //     }
    //   }
    // ],
    // "@typescript-eslint/member-delimiter-style": [
    //   "error",
    //   {
    //     "multiline": {
    //       "delimiter": "semi",
    //       "requireLast": true
    //     },
    //     "singleline": {
    //       "delimiter": "semi",
    //       "requireLast": false
    //     }
    //   }
    // ],
    // "@typescript-eslint/naming-convention": "error",
    // "@typescript-eslint/no-array-constructor": "error",
    // "@typescript-eslint/no-empty-function": "error",
    // "@typescript-eslint/no-empty-interface": "error",
    // "@typescript-eslint/no-explicit-any": "off",
    // "@typescript-eslint/no-extra-non-null-assertion": "error",
    // "@typescript-eslint/no-extra-semi": "error",
    // "@typescript-eslint/no-inferrable-types": "off",
    // "@typescript-eslint/no-misused-new": "error",
    // "@typescript-eslint/no-namespace": "error",
    // "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
    // "@typescript-eslint/no-non-null-assertion": "warn",
    // "@typescript-eslint/no-parameter-properties": "off",
    // "@typescript-eslint/no-shadow": [
    //   "error",
    //   {
    //     "hoist": "all"
    //   }
    // ],
    // "@typescript-eslint/no-this-alias": "error",
    // "@typescript-eslint/no-unused-expressions": "error",
    // "@typescript-eslint/no-unused-vars": "warn",
    // "@typescript-eslint/no-use-before-define": "off",
    // "@typescript-eslint/no-var-requires": "error",
    // "@typescript-eslint/prefer-as-const": "error",
    // "@typescript-eslint/prefer-for-of": "error",
    // "@typescript-eslint/prefer-function-type": "error",
    // "@typescript-eslint/prefer-namespace-keyword": "error",
    // "@typescript-eslint/semi": [
    //   "error",
    //   "always"
    // ],
    // "@typescript-eslint/triple-slash-reference": [
    //   "error",
    //   {
    //     "path": "always",
    //     "types": "prefer-import",
    //     "lib": "always"
    //   }
    // ],
    // "@typescript-eslint/unified-signatures": "error",
    // "arrow-parens": [
    //   "error",
    //   "always"
    // ],
    // "comma-dangle": [
    //   "error",
    //   "always-multiline"
    // ],
    // "complexity": "off",
    // "constructor-super": "error",
    // "eqeqeq": [
    //   "error",
    //   "smart"
    // ],
    // "for-direction": "error",
    // "getter-return": "error",
    // "guard-for-in": "off",
    // "id-blacklist": [
    //   "error",
    //   "any",
    //   "Number",
    //   "number",
    //   "String",
    //   "string",
    //   "Boolean",
    //   "boolean",
    //   "Undefined",
    //   "undefined"
    // ],
    // "id-match": "error",
    // // "jsdoc/check-alignment": "error",
    // // "jsdoc/check-indentation": "error",
    // // "jsdoc/newline-after-description": "error",
    // "max-classes-per-file": [
    //   "off",
    //   1
    // ],
    // "new-parens": "error",
    // "no-array-constructor": "off",
    // "no-async-promise-executor": "error",
    // "no-bitwise": "error",
    // "no-caller": "error",
    // "no-case-declarations": "error",
    // "no-class-assign": "error",
    // "no-compare-neg-zero": "error",
    // "no-cond-assign": "error",
    // "no-console": "off",
    // "no-const-assign": "error",
    // "no-constant-condition": "error",
    // "no-control-regex": "error",
    // "no-debugger": "error",
    // "no-delete-var": "error",
    // "no-dupe-args": "error",
    // "no-dupe-class-members": "error",
    // "no-dupe-else-if": "error",
    // "no-dupe-keys": "error",
    // "no-duplicate-case": "error",
    // "no-duplicate-imports": "error",
    // "no-empty": [
    //   "error",
    //   {
    //     "allowEmptyCatch": true
    //   }
    // ],
    // "no-empty-character-class": "error",
    // "no-empty-function": "off",
    // "no-empty-pattern": "error",
    // "no-eval": "error",
    // "no-ex-assign": "error",
    // "no-extra-boolean-cast": "error",
    // "no-extra-semi": "off",
    // "no-fallthrough": "off",
    // "no-func-assign": "error",
    // "no-global-assign": "error",
    // "no-import-assign": "error",
    // "no-inner-declarations": "error",
    // "no-invalid-regexp": "error",
    // "no-invalid-this": "off",
    // "no-irregular-whitespace": "error",
    // "no-misleading-character-class": "error",
    // "no-mixed-spaces-and-tabs": "error",
    // "no-new-symbol": "error",
    // "no-new-wrappers": "error",
    // "no-obj-calls": "error",
    // "no-octal": "error",
    // "no-prototype-builtins": "error",
    // "no-redeclare": "error",
    // "no-regex-spaces": "error",
    // "no-self-assign": "error",
    // "no-setter-return": "error",
    // "no-shadow-restricted-names": "error",
    // "no-sparse-arrays": "error",
    // "no-this-before-super": "error",
    // "no-throw-literal": "error",
    // "no-trailing-spaces": "error",
    // "no-undef": "error",
    // "no-undef-init": "error",
    // "no-unexpected-multiline": "error",
    // "no-unreachable": "error",
    // "no-unsafe-finally": "error",
    // "no-unsafe-negation": "error",
    // "no-unused-labels": "error",
    // "no-unused-vars": "off",
    // "no-useless-catch": "error",
    // "no-useless-escape": "error",
    // "no-var": "error",
    // "no-with": "error",
    // "object-shorthand": "error",
    // "one-var": [
    //   "error",
    //   "never"
    // ],
    // // "prefer-arrow/prefer-arrow-functions": "error",
    // "prefer-const": "error",
    // "radix": "error",
    // "require-yield": "error",
    // "spaced-comment": [
    //   "error",
    //   "always",
    //   {
    //     "markers": [
    //       "/"
    //     ]
    //   }
    // ],
    // "use-isnan": "error",
    // "valid-typeof": "off",
  }
};
